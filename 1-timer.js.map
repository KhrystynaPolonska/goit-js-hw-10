{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst datetimePicker = document.getElementById(\"datetime-picker\");\nconst startBtn = document.getElementById(\"start-btn\");\nconst daysEl = document.getElementById(\"days\");\nconst hoursEl = document.getElementById(\"hours\");\nconst minutesEl = document.getElementById(\"minutes\");\nconst secondsEl = document.getElementById(\"seconds\");\n\nlet userSelectedDate = null;\nlet timerInterval = null;\n\nconst picker = flatpickr(datetimePicker, {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    if (selectedDate > new Date()) {\n      userSelectedDate = selectedDate;\n      startBtn.disabled = false;\n    } else {\n      iziToast.error({\n        message: 'Please choose a date in the future',\n      });\n      startBtn.disabled = true;\n    }\n  },\n});\n\nstartBtn.addEventListener(\"click\", () => {\n  if (!userSelectedDate) return;\n\n  startBtn.disabled = true;\n  datetimePicker.disabled = true;\n\n  timerInterval = setInterval(() => {\n    const now = new Date();\n    const diff = userSelectedDate - now;\n\n    if (diff <= 0) {\n      clearInterval(timerInterval);\n      updateTimerUI({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n      datetimePicker.disabled = false;\n      return;\n    }\n\n    const timeData = convertMs(diff);\n    updateTimerUI(timeData);\n  }, 1000);\n});\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, \"0\");\n}\n\nfunction updateTimerUI({ days, hours, minutes, seconds }) {\n  daysEl.textContent = addLeadingZero(days);\n  hoursEl.textContent = addLeadingZero(hours);\n  minutesEl.textContent = addLeadingZero(minutes);\n  secondsEl.textContent = addLeadingZero(seconds);\n}\n"],"names":["datetimePicker","startBtn","daysEl","hoursEl","minutesEl","secondsEl","userSelectedDate","timerInterval","flatpickr","selectedDates","selectedDate","iziToast","diff","updateTimerUI","timeData","convertMs","ms","days","hours","minutes","seconds","addLeadingZero","value"],"mappings":"+IAMA,MAAMA,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAW,SAAS,eAAe,WAAW,EAC9CC,EAAS,SAAS,eAAe,MAAM,EACvCC,EAAU,SAAS,eAAe,OAAO,EACzCC,EAAY,SAAS,eAAe,SAAS,EAC7CC,EAAY,SAAS,eAAe,SAAS,EAEnD,IAAIC,EAAmB,KACnBC,EAAgB,KAELC,EAAUR,EAAgB,CACvC,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQS,EAAe,CACrB,MAAMC,EAAeD,EAAc,CAAC,EAChCC,EAAe,IAAI,MACrBJ,EAAmBI,EACnBT,EAAS,SAAW,KAEpBU,EAAS,MAAM,CACb,QAAS,oCACjB,CAAO,EACDV,EAAS,SAAW,GAEvB,CACH,CAAC,EAEDA,EAAS,iBAAiB,QAAS,IAAM,CAClCK,IAELL,EAAS,SAAW,GACpBD,EAAe,SAAW,GAE1BO,EAAgB,YAAY,IAAM,CAEhC,MAAMK,EAAON,EADD,IAAI,KAGhB,GAAIM,GAAQ,EAAG,CACb,cAAcL,CAAa,EAC3BM,EAAc,CAAE,KAAM,EAAG,MAAO,EAAG,QAAS,EAAG,QAAS,CAAC,CAAE,EAC3Db,EAAe,SAAW,GAC1B,MACD,CAED,MAAMc,EAAWC,EAAUH,CAAI,EAC/BC,EAAcC,CAAQ,CACvB,EAAE,GAAI,EACT,CAAC,EAED,SAASC,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASC,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAAST,EAAc,CAAE,KAAAI,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CACxDlB,EAAO,YAAcmB,EAAeJ,CAAI,EACxCd,EAAQ,YAAckB,EAAeH,CAAK,EAC1Cd,EAAU,YAAciB,EAAeF,CAAO,EAC9Cd,EAAU,YAAcgB,EAAeD,CAAO,CAChD"}